#include<iostream>
#include <string>
using namespace std;
int total = 5;

struct trie
{ bool end;
  bool partword;
  trie * alp[26];
};

struct trie * create_trie()
{
	trie * newnode = new trie;
	newnode->end = false;
	
	for(int i = 0; i < 26; ++i)
	 newnode->alp[i] = NULL;
	return newnode;
}
void insert_trie(struct trie * root, string a)
{	trie * Temp = root;
	
	for(int i = 0; i < a.length(); ++i)
	{       int W = a[i] - 'a';
		if(Temp->alp[W] == NULL)
			Temp->alp[W] = create_trie();
		if(Temp->end == true)
		 Temp->end = false;
		Temp = Temp->alp[W];
	}
	Temp->partword = true;
	Temp->end = true;
}

int search(struct trie * root)
{
    trie * Temp=root;
    int total = 0;
    if(Temp->end == true)
       return 1;
    else if(Temp->partword == true)
      ++total;
    else
    {for(int i = 0; i < 26; ++i)
        {
            if(Temp->alp[i] != NULL)
               total += search(Temp->alp[i]);
        }
    }
    return total;
}
void remove_trie(struct trie * root, string a)
{       trie * Temp = root, * prev = root;
	int i;
	for(i = 0; search(Temp) > 1; ++i)
	{
	    int W = a[i] - 97;
	    prev = Temp;
	    Temp = Temp->alp[W];
	    if(i == a.length())
	    {
	        prev->partword = false;
	        Temp->partword = false;
	        break;
	    }
	}
	
	if(i < a.length())
	{
	    int W= a[i - 1] - 97;
	    prev->alp[W] = NULL;
	}
}
void search_top5(struct trie * start, string a)
{      bool flag = false;
	
	if(total > 0)
       {    for(int i = 0; i < 26; ++i)
	    { 	if(start->alp[i] != NULL)
	     {   	    
	        flag = true;
		char b = i + 97;
		string c = a + b;
		trie * temp = start;
		temp = temp->child[i];
		search_top5(temp, c);		
	     }
	    }
	    if((start->partword == true) && (start->end == false))
    	   {
    	        --total;
	        cout<<a<<endl;
	    }
	    else if(flag == false)
	    {       --total;
		    cout<<a<<endl;
	    }    
	}
}
void query_top5(struct trie * root, string a)
{      trie * Temp = root;
	for(int i = 0; i < a.length(); ++i)
	{int index = a[i] - 97;
		if(Temp->alp[index] != NULL)
		{
		   Temp = Temp->alp[index];						     
		}
	}	
	if(search(Temp) > 0)
	   search_top5(Temp, a);    
	
}
void revert(int x, string queries[], string queriess[], struct trie * root, int n)
{    int c = 0;
    for(int i = 0; (c< x) && (i  < n); ++i)
    { if(queries[i][0] = 'a')
        {
            ++c;
            insert_trie(root, queriess[i]);
        }
        else if(queries[i][2] == 'm')
        {
            ++c;
            remove_trie(root, queriess[i]);
        }
    }
}

int main ()
{ trie * root = create_trie();
	string keys[100],queries[100],queriess[100];
	int N;
	cin>>N;
	
	for(int i = 0; i < N; ++i)
	{
        cin>>keys[i];
        insert_trie(root, keys[i]);
    }
	int Q; 
	cin>>Q;
	
	for(int i = 0; i < Q; ++i)
	{
        cin>>queries[i];
        total = 5;
		if(queries[i][0] == 'q')
		{
		    cin>>queriess[i];
			query_top5(root, queriess[i]);
		}
		else if(queries[i][0] == 'a')
		{
			cin>>queriess[i];
			insert_trie(root, queriess[i]);
		}
		else if(queries[i][2] == 'm')
		{
			cin>>queriess[i];
			remove_trie(root, queriess[i]);
		}
		else if(queries[i][2] == 'v')
		{    int x;
		    cin>>x;
		    root = create_trie();
		    for(int j = 0; j < N; ++j)
		        insert_trie(root, keys[j]);
		    revert(x, queries, queriess, root, i);
		}
		
	}	
	
	return 0;
}
